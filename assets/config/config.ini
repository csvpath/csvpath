[csvpath_files]
extensions = txt, csvpath, csvpaths

[csv_files]
extensions = txt, csv, tsv, dat, tab, psv, ssv

[errors]
csvpath = raise, collect, stop, fail, print
csvpaths = raise, collect

[logging]
csvpath = info
csvpaths = info
log_file = logs/csvpath.log
log_files_to_keep = 100
log_file_size = 52428800

[config]
path = config/config.ini

[cache]
path = cache

[functions]
imports = config/functions.imports

[listeners]
groups =
#slack, marquez

#add marquez to the list of groups above for OpenLineage events to a local Marquez
file = from csvpath.managers.files.file_listener_ol import OpenLineageFileListener
paths = from csvpath.managers.paths.paths_listener_ol import OpenLineagePathsListener
result = from csvpath.managers.results.result_listener_ol import OpenLineageResultListener
results = from csvpath.managers.results.results_listener_ol import OpenLineageResultsListener

# add slack to the list of groups above for alerts to slack webhooks
slack.file = from csvpath.managers.integrations.slack.sender import SlackSender
slack.paths = from csvpath.managers.integrations.slack.sender import SlackSender
slack.result = from csvpath.managers.integrations.slack.sender import SlackSender
slack.results = from csvpath.managers.integrations.slack.sender import SlackSender

[marquez]
base_url = http://localhost:5000
endpoint = api/v1/lineage
api_key = "none"
timeout = 5
verify = False

[slack]
# add your main webhook here. to set webhooks on a csvpath-by-csvpath basis add
# on-valid-slack: webhook-minus-'https://' and/or
# on-invalid-slack: webhook-minus-'https://'
webhook_url =

[results]
archive = archive

[inputs]
files = inputs/named_files
csvpaths = inputs/named_paths
on_unmatched_file_fingerprints = halt

