import math

from opentelemetry import metrics
from opentelemetry.sdk.metrics import MeterProvider
from opentelemetry.exporter.otlp.proto.http.metric_exporter import OTLPMetricExporter
from opentelemetry.sdk.metrics.export import PeriodicExportingMetricReader
from opentelemetry.sdk.metrics.export import InMemoryMetricReader
from csvpath.managers.listener import Listener


class Metrics:
    def __init__(self, listener: Listener, exporting=True):
        try:
            self.listener = listener
            self.reader = None
            self.provider = None
            self.meter = None
            if exporting:
                #
                # setting math.inf makes the reader never export. we can then call collect()
                # manually in the listeners w/o chance of double counting.
                #
                self.reader = PeriodicExportingMetricReader(
                    OTLPMetricExporter(), export_interval_millis=math.inf
                )
                self.provider = MeterProvider(metric_readers=[self.reader])
                metrics.set_meter_provider(self.provider)
            else:
                self.reader = InMemoryMetricReader()
                self.provider = MeterProvider(metric_readers=[self.reader])
                metrics.set_meter_provider(self.provider)

            #
            # the otlp listeners have a csvpath member, so this shouldn't be a problem; it doesn't
            # help that Listener doesn't have a csvpath member, tho. :/
            #
            self.meter = metrics.get_meter(self.listener.csvpaths.project)

            self.runs_started = self.meter.create_counter(
                "runs_started_count", description="Number of named-files started"
            )
            self.runs_completed = self.meter.create_up_down_counter(
                "runs_completed_count", description="Number of named-files completed"
            )
            self.errors = self.meter.create_up_down_counter(
                "errors_count",
                description="Number of errors found at the end of a csvpath's run",
            )
            self.files = self.meter.create_up_down_counter(
                "files_generated_count",
                description="Number of result files generated by an instance",
            )
            self.valid = self.meter.create_up_down_counter(
                "valid_files", description="Number of named-files considered valid"
            )
            self.files_expected = self.meter.create_up_down_counter(
                "were_expected_files_generated",
                description="Were all the files expected actually produced?",
            )
            self.size = self.meter.create_histogram(
                "named_file_size_distribution",
                description="Distribution of processed file sizes",
            )
            self.bytes = self.meter.create_counter(
                "input_file_bytes_count",
                description="Number of bytes in the named-file",
            )
        except Exception:
            import traceback

            print(traceback.format_exc())
