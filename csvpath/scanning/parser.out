Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ANY
    NAME

Grammar

Rule 0     S' -> path
Rule 1     root -> ROOT filename
Rule 2     filename -> FILENAME
Rule 3     path -> root LEFT_BRACKET expression RIGHT_BRACKET
Rule 4     expression -> expression PLUS term
Rule 5     expression -> expression MINUS term
Rule 6     expression -> term
Rule 7     term -> NUMBER
Rule 8     term -> NUMBER ALL_LINES
Rule 9     term -> ALL_LINES

Terminals, with rules where they appear

ALL_LINES            : 8 9
ANY                  : 
FILENAME             : 2
LEFT_BRACKET         : 3
MINUS                : 5
NAME                 : 
NUMBER               : 7 8
PLUS                 : 4
RIGHT_BRACKET        : 3
ROOT                 : 1
error                : 

Nonterminals, with rules where they appear

expression           : 3 4 5
filename             : 1
path                 : 0
root                 : 3
term                 : 4 5 6

Parsing method: LALR

state 0

    (0) S' -> . path
    (3) path -> . root LEFT_BRACKET expression RIGHT_BRACKET
    (1) root -> . ROOT filename

    ROOT            shift and go to state 3

    path                           shift and go to state 1
    root                           shift and go to state 2

state 1

    (0) S' -> path .



state 2

    (3) path -> root . LEFT_BRACKET expression RIGHT_BRACKET

    LEFT_BRACKET    shift and go to state 4


state 3

    (1) root -> ROOT . filename
    (2) filename -> . FILENAME

    FILENAME        shift and go to state 6

    filename                       shift and go to state 5

state 4

    (3) path -> root LEFT_BRACKET . expression RIGHT_BRACKET
    (4) expression -> . expression PLUS term
    (5) expression -> . expression MINUS term
    (6) expression -> . term
    (7) term -> . NUMBER
    (8) term -> . NUMBER ALL_LINES
    (9) term -> . ALL_LINES

    NUMBER          shift and go to state 9
    ALL_LINES       shift and go to state 10

    expression                     shift and go to state 7
    term                           shift and go to state 8

state 5

    (1) root -> ROOT filename .

    LEFT_BRACKET    reduce using rule 1 (root -> ROOT filename .)


state 6

    (2) filename -> FILENAME .

    LEFT_BRACKET    reduce using rule 2 (filename -> FILENAME .)


state 7

    (3) path -> root LEFT_BRACKET expression . RIGHT_BRACKET
    (4) expression -> expression . PLUS term
    (5) expression -> expression . MINUS term

    RIGHT_BRACKET   shift and go to state 11
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13


state 8

    (6) expression -> term .

    RIGHT_BRACKET   reduce using rule 6 (expression -> term .)
    PLUS            reduce using rule 6 (expression -> term .)
    MINUS           reduce using rule 6 (expression -> term .)


state 9

    (7) term -> NUMBER .
    (8) term -> NUMBER . ALL_LINES

    RIGHT_BRACKET   reduce using rule 7 (term -> NUMBER .)
    PLUS            reduce using rule 7 (term -> NUMBER .)
    MINUS           reduce using rule 7 (term -> NUMBER .)
    ALL_LINES       shift and go to state 14


state 10

    (9) term -> ALL_LINES .

    RIGHT_BRACKET   reduce using rule 9 (term -> ALL_LINES .)
    PLUS            reduce using rule 9 (term -> ALL_LINES .)
    MINUS           reduce using rule 9 (term -> ALL_LINES .)


state 11

    (3) path -> root LEFT_BRACKET expression RIGHT_BRACKET .

    $end            reduce using rule 3 (path -> root LEFT_BRACKET expression RIGHT_BRACKET .)


state 12

    (4) expression -> expression PLUS . term
    (7) term -> . NUMBER
    (8) term -> . NUMBER ALL_LINES
    (9) term -> . ALL_LINES

    NUMBER          shift and go to state 9
    ALL_LINES       shift and go to state 10

    term                           shift and go to state 15

state 13

    (5) expression -> expression MINUS . term
    (7) term -> . NUMBER
    (8) term -> . NUMBER ALL_LINES
    (9) term -> . ALL_LINES

    NUMBER          shift and go to state 9
    ALL_LINES       shift and go to state 10

    term                           shift and go to state 16

state 14

    (8) term -> NUMBER ALL_LINES .

    RIGHT_BRACKET   reduce using rule 8 (term -> NUMBER ALL_LINES .)
    PLUS            reduce using rule 8 (term -> NUMBER ALL_LINES .)
    MINUS           reduce using rule 8 (term -> NUMBER ALL_LINES .)


state 15

    (4) expression -> expression PLUS term .

    RIGHT_BRACKET   reduce using rule 4 (expression -> expression PLUS term .)
    PLUS            reduce using rule 4 (expression -> expression PLUS term .)
    MINUS           reduce using rule 4 (expression -> expression PLUS term .)


state 16

    (5) expression -> expression MINUS term .

    RIGHT_BRACKET   reduce using rule 5 (expression -> expression MINUS term .)
    PLUS            reduce using rule 5 (expression -> expression MINUS term .)
    MINUS           reduce using rule 5 (expression -> expression MINUS term .)

