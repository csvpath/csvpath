
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'match_partCLOSE_PAREN EQUALS HEADER_SYM LEFT_BRACKET NAME NUMBER OPEN_PAREN QUOTE REGEX RIGHT_BRACKET VAR_SYMmatch_part : LEFT_BRACKET expression RIGHT_BRACKET\n                      | LEFT_BRACKET expressions RIGHT_BRACKET\n        expressions : expression\n                       | expressions expression\n        expression : function\n                        | equality\n                        | header function : NAME OPEN_PAREN CLOSE_PAREN\n                    | NAME OPEN_PAREN equality CLOSE_PAREN\n                    | NAME OPEN_PAREN function CLOSE_PAREN\n                    | NAME OPEN_PAREN var_or_header CLOSE_PAREN\n                    | NAME OPEN_PAREN term CLOSE_PAREN\n        equality : function EQUALS term\n                    | function EQUALS var_or_header\n                    | var_or_header EQUALS function\n                    | var_or_header EQUALS term\n                    | var_or_header EQUALS var_or_header\n                    | term EQUALS var_or_header\n                    | term EQUALS function\n        term : QUOTE NAME QUOTE\n                | QUOTE NUMBER QUOTE\n                | NUMBER\n                | REGEX\n        var_or_header : header\n                         | var\n        var : VAR_SYM NAME header : HEADER_SYM NAME\n                  | HEADER_SYM NUMBER\n        '
    
_lr_action_items = {'LEFT_BRACKET':([0,],[2,]),'$end':([1,17,18,],[0,-1,-2,]),'NAME':([2,3,4,5,6,7,11,12,13,14,15,16,19,21,22,23,24,25,28,29,30,31,32,37,38,39,40,41,42,43,44,45,46,47,],[8,-3,8,-5,-6,-7,24,-22,-25,26,-23,28,-4,8,8,8,-27,-28,-26,-13,-14,-24,-8,-17,-15,-16,-18,-19,-20,-21,-9,-10,-11,-12,]),'HEADER_SYM':([2,3,4,5,6,7,12,13,15,19,20,21,22,23,24,25,28,29,30,31,32,37,38,39,40,41,42,43,44,45,46,47,],[11,-3,11,-5,-6,-7,-22,-25,-23,-4,11,11,11,11,-27,-28,-26,-13,-14,-24,-8,-17,-15,-16,-18,-19,-20,-21,-9,-10,-11,-12,]),'QUOTE':([2,3,4,5,6,7,12,13,15,19,20,21,22,24,25,26,27,28,29,30,31,32,37,38,39,40,41,42,43,44,45,46,47,],[14,-3,14,-5,-6,-7,-22,-25,-23,-4,14,14,14,-27,-28,42,43,-26,-13,-14,-24,-8,-17,-15,-16,-18,-19,-20,-21,-9,-10,-11,-12,]),'NUMBER':([2,3,4,5,6,7,11,12,13,14,15,19,20,21,22,24,25,28,29,30,31,32,37,38,39,40,41,42,43,44,45,46,47,],[12,-3,12,-5,-6,-7,25,-22,-25,27,-23,-4,12,12,12,-27,-28,-26,-13,-14,-24,-8,-17,-15,-16,-18,-19,-20,-21,-9,-10,-11,-12,]),'REGEX':([2,3,4,5,6,7,12,13,15,19,20,21,22,24,25,28,29,30,31,32,37,38,39,40,41,42,43,44,45,46,47,],[15,-3,15,-5,-6,-7,-22,-25,-23,-4,15,15,15,-27,-28,-26,-13,-14,-24,-8,-17,-15,-16,-18,-19,-20,-21,-9,-10,-11,-12,]),'VAR_SYM':([2,3,4,5,6,7,12,13,15,19,20,21,22,23,24,25,28,29,30,31,32,37,38,39,40,41,42,43,44,45,46,47,],[16,-3,16,-5,-6,-7,-22,-25,-23,-4,16,16,16,16,-27,-28,-26,-13,-14,-24,-8,-17,-15,-16,-18,-19,-20,-21,-9,-10,-11,-12,]),'RIGHT_BRACKET':([3,4,5,6,7,12,13,15,19,24,25,28,29,30,31,32,37,38,39,40,41,42,43,44,45,46,47,],[17,18,-5,-6,-7,-22,-25,-23,-4,-27,-28,-26,-13,-14,-24,-8,-17,-15,-16,-18,-19,-20,-21,-9,-10,-11,-12,]),'EQUALS':([5,7,9,10,12,13,15,24,25,28,31,32,34,35,36,42,43,44,45,46,47,],[20,-24,22,23,-22,-25,-23,-27,-28,-26,-24,-8,20,22,23,-20,-21,-9,-10,-11,-12,]),'OPEN_PAREN':([8,],[21,]),'CLOSE_PAREN':([12,13,15,21,24,25,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,],[-22,-25,-23,32,-27,-28,-26,-13,-14,-24,-8,44,45,46,47,-17,-15,-16,-18,-19,-20,-21,-9,-10,-11,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'match_part':([0,],[1,]),'expression':([2,4,],[3,19,]),'expressions':([2,],[4,]),'function':([2,4,21,22,23,],[5,5,34,38,41,]),'equality':([2,4,21,],[6,6,33,]),'header':([2,4,20,21,22,23,],[7,7,31,31,31,31,]),'var_or_header':([2,4,20,21,22,23,],[9,9,30,35,37,40,]),'term':([2,4,20,21,22,],[10,10,29,36,39,]),'var':([2,4,20,21,22,23,],[13,13,13,13,13,13,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> match_part","S'",1,None,None,None),
  ('match_part -> LEFT_BRACKET expression RIGHT_BRACKET','match_part',3,'p_match_part','matcher.py',78),
  ('match_part -> LEFT_BRACKET expressions RIGHT_BRACKET','match_part',3,'p_match_part','matcher.py',79),
  ('expressions -> expression','expressions',1,'p_expressions','matcher.py',86),
  ('expressions -> expressions expression','expressions',2,'p_expressions','matcher.py',87),
  ('expression -> function','expression',1,'p_expression','matcher.py',94),
  ('expression -> equality','expression',1,'p_expression','matcher.py',95),
  ('expression -> header','expression',1,'p_expression','matcher.py',96),
  ('function -> NAME OPEN_PAREN CLOSE_PAREN','function',3,'p_function','matcher.py',105),
  ('function -> NAME OPEN_PAREN equality CLOSE_PAREN','function',4,'p_function','matcher.py',106),
  ('function -> NAME OPEN_PAREN function CLOSE_PAREN','function',4,'p_function','matcher.py',107),
  ('function -> NAME OPEN_PAREN var_or_header CLOSE_PAREN','function',4,'p_function','matcher.py',108),
  ('function -> NAME OPEN_PAREN term CLOSE_PAREN','function',4,'p_function','matcher.py',109),
  ('equality -> function EQUALS term','equality',3,'p_equality','matcher.py',122),
  ('equality -> function EQUALS var_or_header','equality',3,'p_equality','matcher.py',123),
  ('equality -> var_or_header EQUALS function','equality',3,'p_equality','matcher.py',124),
  ('equality -> var_or_header EQUALS term','equality',3,'p_equality','matcher.py',125),
  ('equality -> var_or_header EQUALS var_or_header','equality',3,'p_equality','matcher.py',126),
  ('equality -> term EQUALS var_or_header','equality',3,'p_equality','matcher.py',127),
  ('equality -> term EQUALS function','equality',3,'p_equality','matcher.py',128),
  ('term -> QUOTE NAME QUOTE','term',3,'p_term','matcher.py',151),
  ('term -> QUOTE NUMBER QUOTE','term',3,'p_term','matcher.py',152),
  ('term -> NUMBER','term',1,'p_term','matcher.py',153),
  ('term -> REGEX','term',1,'p_term','matcher.py',154),
  ('var_or_header -> header','var_or_header',1,'p_var_or_header','matcher.py',163),
  ('var_or_header -> var','var_or_header',1,'p_var_or_header','matcher.py',164),
  ('var -> VAR_SYM NAME','var',2,'p_var','matcher.py',170),
  ('header -> HEADER_SYM NAME','header',2,'p_header','matcher.py',176),
  ('header -> HEADER_SYM NUMBER','header',2,'p_header','matcher.py',177),
]
